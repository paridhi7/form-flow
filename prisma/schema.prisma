// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  forms         Form[]
  customDomains CustomDomain[]

  @@map("users")
}

model Theme {
  id              String   @id @default(uuid())
  name            String?  // For naming custom themes
  backgroundColor String   @default("#ffffff")
  questionColor   String   @default("#000000")
  answerColor     String   @default("#000000")
  buttonColor     String   @default("#292929")
  buttonTextColor String   @default("#ffffff")
  font            String   @default("Inter")
  logo            String?
  backgroundImage String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  forms           Form[]

  @@map("themes")
}

model Form {
  id          String   @id @default(uuid())
  userId      String
  themeId     String?  // Optional to allow forms without custom themes
  title       String
  description String?
  settings    Json?    // Keep this for other form settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  theme       Theme?      @relation(fields: [themeId], references: [id])
  blocks      FormBlock[]
  logic       FormLogic[]
  responses   FormResponse[]

  @@map("forms")
}

enum BlockType {
  statement
  shortText
  longText
  email
  phone
  number
  url
  singleSelect
  multiSelect
  dropdown
  date
  fileUpload
}

enum SpecialBlockType {
  welcome
  thankYou
}

model FormBlock {
  id              String            @id @default(uuid())
  formId          String
  type            BlockType
  isSpecial       SpecialBlockType?
  question        String
  description     String?
  buttonText      String?
  buttonUrl       String?
  required        Boolean           @default(false)
  placeholder     String?
  options         String[]          @default([])
  maxLength       Int?
  minValue        Int?
  maxValue        Int?
  maxFileSize     Int?
  order           Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  form            Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  logicSources    FormLogic[]       @relation("LogicSource")
  logicTargets    FormLogic[]       @relation("LogicTarget")
  answers         ResponseAnswer[]

  @@map("form_blocks")
}

enum LogicConditionType {
  EQUALS
  NOT_EQUALS
  CONTAINS
  NOT_CONTAINS
  GREATER_THAN
  LESS_THAN
}

enum LogicAction {
  SHOW
  HIDE
  SKIP_TO
}

model FormLogic {
  id              String             @id @default(uuid())
  formId          String
  sourceBlockId   String
  conditionType   LogicConditionType
  conditionValue  String
  targetBlockId   String
  action          LogicAction
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  form            Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  sourceBlock     FormBlock          @relation("LogicSource", fields: [sourceBlockId], references: [id])
  targetBlock     FormBlock          @relation("LogicTarget", fields: [targetBlockId], references: [id])

  @@map("form_logic")
}

model FormResponse {
  id            String   @id @default(uuid())
  formId        String
  respondentIp  String?
  userAgent     String?
  completedAt   DateTime
  createdAt     DateTime @default(now())

  // Relations
  form          Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       ResponseAnswer[]

  @@map("form_responses")
}

model ResponseAnswer {
  id          String   @id @default(uuid())
  responseId  String
  blockId     String
  value       String
  createdAt   DateTime @default(now())

  // Relations
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  block       FormBlock    @relation(fields: [blockId], references: [id])

  @@map("response_answers")
}

enum DomainVerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

enum SSLStatus {
  PENDING
  ACTIVE
  FAILED
}

model CustomDomain {
  id                String                  @id @default(uuid())
  userId            String
  domain            String                  @unique
  verificationStatus DomainVerificationStatus @default(PENDING)
  sslStatus         SSLStatus                @default(PENDING)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt

  // Relations
  user              User                     @relation(fields: [userId], references: [id])

  @@map("custom_domains")
}